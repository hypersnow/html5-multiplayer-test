{"version":3,"sources":["node_modules/browserify/node_modules/browser-pack/_prelude.js","client/src/client.js","html5-multiplayer-test.min.js","client/src/entities/bullet.js","client/src/entities/player.js","client/src/states/boot.js","client/src/states/game.js","client/src/states/preload.js","node_modules/browserify/node_modules/process/browser.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length",1,"module","startGame","game","Phaser","Game","AUTO","socket","io","state","add","start","window","loaded","./states/boot.js","./states/game.js","./states/preload.js",2,"Bullet","x","y","direction","Sprite","this","physics","arcade","enable","anchor","setTo","speed","body","velocity","angle","dead","setInterval","die","bind","existing","prototype","Object","create","constructor","moveUpdate","platforms","bringToTop","overlap",3,"Player","control","gravity","animations","scale","setSize","tint","Math","round","random","pow","toString","nickname","String","rnd","integerInRange","nicknameText","text","fontSize","fill","jumping","jump","jumpPrevious","jumpAmount","jumpLimit","moveTimer","canShoot","shootPower","shootInterval","reshoot","bullets","group","classType","enableBody","cursors","collide","input","keyboard","isDown","Keyboard","A","D","left","right","abs","W","touching","down","up","play","stop","frame","xBorder","yBorder","world","width","height","forEach","bullet","remove","destroy","./bullet",4,"Boot","scaleMode","ScaleManager","RESIZE","startSystem","Physics","ARCADE","setBounds","stage","smoothed",5,"sendIntervalTime","fixedSendIntervalTime","initSend","buddydistancetimer","onSocketConnect","setEventHandlers","sky","sprite","player","name","id","camera","follow","Camera","FOLLOW_PLATFORMER","otherPlayers","addPlatform","stars","star","bounce","createCursorKeys","score","scoreText","fixedToCamera","platform","immovable","checkCollision","on","onSocketDisconnect","onPlayerConnect","onPlayerUpdate","onPlayerDisconnect","onPlayers","update","collectStar","otherPlayer","kill","console","log","sendInterval","sendLoop","fixedSendLoop","clearInterval","msg","addOtherPlayer","tempSocket","updatedX","updatedY","distanceToXY","moveToXY","removeAll","sendPlayerUpdate","emit","../entities/player",6,"process","Preload","preload","connect","loadingText","self","load","image","spritesheet","onLoadComplete","connectingText","env","PORT","_process",7,"cleanUpNextTick","draining","currentQueue","queue","concat","queueIndex","drainQueue","timeout","setTimeout","len","run","clearTimeout","Item","fun","array","noop","nextTick","args","Array","arguments","push","apply","title","browser","argv","version","versions","addListener","once","off","removeListener","removeAllListeners","binding","cwd","chdir","dir","umask"],"mappings":"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","file":"html5-multiplayer-test.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","window.game = null;\nwindow.socket = null;\nwindow.loaded = false;\n\nstartGame();\n\nfunction startGame() {\n  game = new Phaser.Game(800, 600, Phaser.AUTO, '');\n  socket = io();\n  \n  game.state.add('boot', require('./states/boot.js'));\n  game.state.add('preload', require('./states/preload.js'));\n  game.state.add('game', require('./states/game.js'));\n    \n  game.state.start('boot');\n}","(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\nwindow.game = null;\nwindow.socket = null;\nwindow.loaded = false;\n\nstartGame();\n\nfunction startGame() {\n  game = new Phaser.Game(800, 600, Phaser.AUTO, '');\n  socket = io();\n  \n  game.state.add('boot', require('./states/boot.js'));\n  game.state.add('preload', require('./states/preload.js'));\n  game.state.add('game', require('./states/game.js'));\n    \n  game.state.start('boot');\n}\n},{\"./states/boot.js\":4,\"./states/game.js\":5,\"./states/preload.js\":6}],2:[function(require,module,exports){\nvar Bullet = function(x, y, direction) {\n    Phaser.Sprite.call(this, game, x, y, 'bullet', 0);\n    game.physics.arcade.enable(this);\n    this.anchor.setTo(0.5, 0.5);\n    this.speed = 1000;\n    switch(direction)\n    {\n      case 'left':\n        this.body.velocity.x = -this.speed;\n        this.angle = 180;\n        break;\n      case 'right':\n        this.body.velocity.x = this.speed;\n        break;\n      case 'up':\n        this.body.velocity.y = -this.speed;\n        this.angle = 270;\n        break;\n      case 'down':\n        this.body.velocity.y = this.speed;\n        this.angle = 90;\n        break;\n    }\n    this.dead = false;\n    setInterval(this.die.bind(this), 300);\n    game.add.existing(this);\n};\n\nBullet.prototype = Object.create(Phaser.Sprite.prototype);\nBullet.prototype.constructor = Bullet;\n\nBullet.prototype.moveUpdate = function(platforms) {\n  this.bringToTop();\n  return (this.game.physics.arcade.overlap(this, platforms) || this.dead);\n};\n\nBullet.prototype.die = function() {\n  this.dead = true;\n}\n\nmodule.exports = Bullet;\n},{}],3:[function(require,module,exports){\nvar Bullet = require(\"./bullet\");\n\nvar Player = function(x, y, control) {\n    Phaser.Sprite.call(this, game, x, y, 'player', 0);\n    game.physics.arcade.enable(this);\n    this.control = control;\n    this.body.gravity.y = 3500;\n    this.animations.add('run', [1, 2], 10, true);\n    this.anchor.setTo(0.5, 1);\n    this.scale.x = 2;\n    this.scale.y = 2;\n    this.body.setSize(10, 30, 0, 0);\n    this.tint = '0x' + (Math.round(Math.random()*Math.pow(2, 24))).toString(16);\n    this.nickname = \"Player \" + String(game.rnd.integerInRange(1000, 9999));\n    this.nicknameText = game.add.text(x + 32, y - 16, this.nickname, { fontSize: '16px', fill: '#000' })\n    this.jumping = false;\n    this.jump = 600;\n    this.jumpPrevious = 0;\n    this.jumpAmount = 0;\n    this.jumpLimit = 8;\n    this.moveTimer = 0;\n    this.canShoot = true;\n    this.shootPower = 400;\n    this.shootInterval = setInterval(this.reshoot.bind(this), 120);\n    this.bullets = game.add.group();\n    this.bullets.classType = Bullet;\n    this.bullets.enableBody = true;\n    game.add.existing(this);\n};\n\nPlayer.prototype = Object.create(Phaser.Sprite.prototype);\nPlayer.prototype.constructor = Player;\n\nPlayer.prototype.moveUpdate = function(platforms, cursors) {\n  game.physics.arcade.collide(this, platforms);\n  if (this.control)\n  {\n    if (game.input.keyboard.isDown(Phaser.Keyboard.A))\n      this.body.velocity.x -= 50;\n    if (game.input.keyboard.isDown(Phaser.Keyboard.D))\n      this.body.velocity.x += 50;\n    if (!game.input.keyboard.isDown(Phaser.Keyboard.A) && !game.input.keyboard.isDown(Phaser.Keyboard.D) && !cursors.left.isDown && !cursors.right.isDown)\n    {\n      if (this.body.velocity.x > 0)\n        this.body.velocity.x -= 50;\n      else if (this.body.velocity.x < 0)\n        this.body.velocity.x += 50;\n      if (Math.abs(this.body.velocity.x) <= 100)\n        this.body.velocity.x = 0;\n    }\n    if (this.body.velocity.x > 800)\n      this.body.velocity.x = 800;\n    else if (this.body.velocity.x < -800)\n      this.body.velocity.x = -800;\n    if (this.body.velocity.x > 400)\n      this.body.velocity.x -= 100;\n    else if (this.body.velocity.x < -400)\n      this.body.velocity.x += 100;\n      \n    if (!this.jumping && game.input.keyboard.isDown(Phaser.Keyboard.W) && this.body.touching.down)\n    {\n      this.jumping = true;\n      this.jumpAmount = 0;\n    }\n    if (this.jumping)\n    {\n      this.body.velocity.y = -this.jump;\n      if (game.input.keyboard.isDown(Phaser.Keyboard.W) && this.jumpAmount <= this.jumpLimit)\n        this.jumpAmount++;\n      else\n        this.jumping = false;\n    }\n    this.jumpPrevious = this.y;\n    \n    if (this.canShoot)\n    {\n      if (cursors.left.isDown)\n      {\n        this.body.velocity.x += this.shootPower;\n        this.bullets.add(new Bullet(this.x, this.y - 32, 'left'));\n      }\n      if (cursors.right.isDown)\n      {\n        this.body.velocity.x -= this.shootPower;\n        this.bullets.add(new Bullet(this.x, this.y - 32, 'right'));\n      }\n      if (cursors.up.isDown)\n      {\n        this.body.velocity.y += this.shootPower;\n        this.bullets.add(new Bullet(this.x, this.y - 32, 'up'));\n      }\n      if (cursors.down.isDown)\n      {\n        this.body.velocity.y -= this.shootPower;\n        this.bullets.add(new Bullet(this.x, this.y - 32, 'down'));\n      }\n      if (cursors.left.isDown || cursors.right.isDown || cursors.up.isDown || cursors.down.isDown)\n        this.canShoot = false;\n    }\n  }\n  \n  if (this.body.velocity.y != 0 && !this.body.touching.down)\n  {\n    this.animations.stop();\n    this.frame = 3;\n  }\n  else if (this.body.velocity.x != 0)\n  {\n    this.animations.play('run');\n    if (this.body.velocity.x > 0)\n      this.scale.x = 2;\n    else\n      this.scale.x = -2;\n  }\n  else\n  {\n    this.animations.stop();\n    this.frame = 0;\n  }\n  \n  if (this.body.velocity.x == 0 && this.body.velocity.y == 0)\n  {\n    if (this.moveTimer > 0)\n      this.moveTimer--;\n  }\n  else\n    this.moveTimer = 120;\n  \n  var xBorder = 12;\n  var yBorder = 64;\n  if (this.x < -xBorder)\n    this.x = game.world.width + xBorder;\n  else if (this.x > game.world.width + xBorder)\n    this.x = -xBorder;\n    \n  if (this.y < -yBorder)\n    this.y = game.world.height + yBorder;\n  else if (this.y > game.world.height + yBorder)\n    this.y = -yBorder;\n    \n  this.bringToTop();\n  this.nicknameText.bringToTop();\n  this.nicknameText.text = this.nickname;\n  this.nicknameText.x = this.x - 46;\n  this.nicknameText.y = this.y - 84;\n  \n  this.bullets.forEach(function(bullet) {\n    if (bullet.moveUpdate(platforms))\n      this.bullets.remove(bullet, true);\n  }, this);\n};\n\nPlayer.prototype.destroy = function() {\n  this.nicknameText.destroy();\n  Phaser.Sprite.prototype.destroy.call(this);\n};\n\nPlayer.prototype.reshoot = function() {\n  this.canShoot = true;\n};\n\nmodule.exports = Player;\n\n\n},{\"./bullet\":2}],4:[function(require,module,exports){\nvar Boot = function() {}\n\nmodule.exports = Boot;\n\nBoot.prototype = {\n  create: function() {\n    game.scale.scaleMode = Phaser.ScaleManager.RESIZE;\n    game.physics.startSystem(Phaser.Physics.ARCADE);\n    game.world.setBounds(0, 0, 2000, 2000);\n    game.stage.smoothed = false;\n    \n    game.state.start('preload');\n  }\n};\n},{}],5:[function(require,module,exports){\nvar Player = require(\"../entities/player\");\n\nvar Game = function() {};\n\nmodule.exports = Game;\n\nGame.prototype = {\n  sendIntervalTime: 60,\n  fixedSendIntervalTime: 600,\n  initSend: false,\n  buddydistancetimer: 0,\n  \n  create: function() {\n    this.onSocketConnect();\n    this.setEventHandlers();\n    \n    var sky = game.add.sprite(0, 0, 'sky');\n    sky.width = game.world.width;\n    sky.height = game.world.height;\n    \n    this.player = new Player(30, 30, true);\n    this.player.name = socket.id;\n    game.camera.follow(this.player, Phaser.Camera.FOLLOW_PLATFORMER);\n    this.initSend = true;\n    \n    this.otherPlayers = game.add.group();\n    this.otherPlayers.classType = Player;\n    this.otherPlayers.enableBody = true;\n    \n    this.platforms = game.add.group();\n    this.platforms.enableBody = true;\n    this.addPlatform(0, game.world.height - 64, 2, 2);\n    this.addPlatform(400, 400, 200, 2);\n    this.addPlatform(0, 250, 1, 1);\n    this.addPlatform(600, 300, 1, 1);\n    this.addPlatform(800, 1500, 1, 1);\n    this.addPlatform(1200, 900, 1, 1);\n    \n    this.stars = game.add.group();\n    this.stars.enableBody = true;\n    for (var i = 0; i < 12; i++)\n    {\n      var star = this.stars.create(i * 70, 0, 'star');\n      star.body.gravity.y = 600;\n      star.body.bounce.y = 0.7 + Math.random() * 0.2;\n    }\n    \n    this.cursors = game.input.keyboard.createCursorKeys();\n    \n    this.score = 0;\n    this.scoreText = game.add.text(16, 16, 'Coins: 0', { fontSize: '32px', fill: '#000' });\n    this.scoreText.fixedToCamera = true;\n    \n    /*this.overlay = game.add.sprite(0, 0, 'pixel');\n    this.overlay.width = game.world.width;\n    this.overlay.height = game.world.height;\n    this.overlay.alpha = 0.25;*/\n  },\n  \n  addPlatform: function(x, y, width, height) {\n    var platform = this.platforms.create(x, y, 'ground');\n    platform.scale.setTo(width, height);\n    platform.body.immovable = true;\n    platform.body.checkCollision.left = false;\n    platform.body.checkCollision.right = false;\n    platform.body.checkCollision.down = false;\n  },\n  \n  setEventHandlers: function() {\n    socket.on(\"connect\", this.onSocketConnect.bind(this));\n    socket.on(\"disconnect\", this.onSocketDisconnect.bind(this));\n    socket.on(\"player connect\", this.onPlayerConnect.bind(this));\n    socket.on(\"player update\", this.onPlayerUpdate.bind(this));\n    socket.on(\"player disconnect\", this.onPlayerDisconnect.bind(this));\n    socket.on(\"players\", this.onPlayers.bind(this));\n    socket.on(\"player count\", this.onPlayers.bind(this));\n  },\n\n  update: function() {\n    this.player.moveUpdate(this.platforms, this.cursors);\n    this.game.physics.arcade.collide(this.stars, this.platforms);\n    this.game.physics.arcade.overlap(this.player, this.stars, this.collectStar, null, this);\n    \n    this.otherPlayers.forEach(function(otherPlayer) {\n      otherPlayer.moveUpdate(this.platforms, this.cursors);\n    }, this);\n  },\n\n  collectStar: function(player, star) {\n    star.kill();\n    \n    this.score += 10;\n    this.scoreText.text = 'Coins: ' + this.score;\n  },\n\n  onSocketConnect: function() {\n    console.log(\"connected to server\");\n    this.sendInterval = setInterval(this.sendLoop.bind(this), this.sendIntervalTime);\n    this.sendInterval = setInterval(this.fixedSendLoop.bind(this), this.fixedSendIntervalTime);\n  },\n\n  onSocketDisconnect: function() {\n    console.log(\"disconnected from server\");\n    clearInterval(this.sendInterval);\n    game.state.start('preload');\n  },\n\n  onPlayerConnect: function(msg) {\n    this.addOtherPlayer(msg);\n    console.log(\"new player connected with id \" + msg[1]);\n  },\n\n  onPlayerUpdate: function(msg) {\n    for(var tempSocket in msg) {\n      this.otherPlayers.forEach(function(otherPlayer) {\n        if (msg[tempSocket][0] == otherPlayer.name)\n        {\n          var updatedX = msg[tempSocket][1];\n          var updatedY = msg[tempSocket][2];\n          if (game.physics.arcade.distanceToXY(otherPlayer, updatedX, updatedY) > 64)\n          {\n            otherPlayer.x = updatedX;\n            otherPlayer.y = updatedY;\n          }\n          else\n            game.physics.arcade.moveToXY(otherPlayer, updatedX, updatedY, 300, 60);\n          otherPlayer.frame = msg[tempSocket][3];\n          otherPlayer.body.velocity.x = msg[tempSocket][4];\n          otherPlayer.body.velocity.y = msg[tempSocket][5];\n        }\n      }, this);\n    }\n  },\n\n  onPlayerDisconnect: function(msg) {\n    this.otherPlayers.forEach(function(otherPlayer) {\n      if (msg == \"/#\" + otherPlayer.name)\n      {\n        otherPlayer.destroy();\n        console.log(\"player dced\");\n      }\n    }, this);\n  },\n  \n  onPlayers: function(msg) {\n    this.otherPlayers.removeAll(true);\n    for(var tempSocket in msg) {\n      if (msg[tempSocket][1] != this.player.name)\n        this.addOtherPlayer(msg[tempSocket]);\n    }\n  },\n  \n  fixedSendLoop: function() {\n    this.sendPlayerUpdate();\n    socket.emit(\"player count\", this.otherPlayers.length + 1);\n  },\n  \n  sendLoop: function() {\n    if (this.initSend)\n    {\n      socket.emit(\"player init\", [true, this.player.name, this.player.x, this.player.y, this.player.frame, this.player.nickname, this.player.tint, this.player.body.velocity.x, this.player.body.velocity.y]);\n      this.initSend = false;\n    }\n    else if (this.player.body.velocity.x != 0 || this.player.body.velocity.y != 0 || this.player.moveTimer > 0)\n      this.sendPlayerUpdate();\n  },\n  \n  sendPlayerUpdate: function() {\n    socket.emit(\"player update\", [true, this.player.x, this.player.y, this.player.frame, this.player.body.velocity.x, this.player.body.velocity.y]);\n  },\n  \n  addOtherPlayer: function(msg) {\n    var otherPlayer = this.otherPlayers.add(new Player(msg[2], msg[3], false));\n    otherPlayer.name = msg[1];\n    otherPlayer.frame = msg[4];\n    otherPlayer.nickname = msg[5];\n    otherPlayer.tint = msg[6];\n    otherPlayer.body.velocity.x = msg[7];\n    otherPlayer.body.velocity.y = msg[8];\n  }\n};\n},{\"../entities/player\":3}],6:[function(require,module,exports){\n(function (process){\nvar Preload = function() {}\n\nmodule.exports = Preload;\n\nPreload.prototype = {\n  preload: function() {\n    if (!loaded)\n    {\n      var loadingText = game.add.text(16, 16, 'Loading...', {fontSize: '24px', fill: '#FFFFFF'});\n      var self = this;\n      game.load.image('sky', '../assets/sky.png');\n      game.load.image('ground', '../assets/platform.png');\n      game.load.image('star', '../assets/star.png');\n      game.load.image('bullet', '../assets/bullet.png');\n      game.load.image('pixel', '../assets/pixel.png');\n      game.load.spritesheet('player', '../assets/player.png', 32, 32);\n      game.load.spritesheet('hit', '../assets/hit.png', 32, 32);\n      game.load.onLoadComplete.add(function() {\n        loaded = true;\n        loadingText.destroy();\n        self.connect();\n      });\n    }\n    else\n      this.connect();\n  },\n\n  connect: function() {\n    var connectingText = game.add.text(16, 16, 'Connecting...', {fontSize: '24px', fill: '#FFFFFF'});\n    socket = io.connect(process.env.PORT);\n    socket.on(\"connect\", function() {\n      connectingText.destroy();\n      game.state.start('game');\n    });\n  },\n};\n}).call(this,require('_process'))\n\n},{\"_process\":7}],7:[function(require,module,exports){\n// shim for using process in browser\n\nvar process = module.exports = {};\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = setTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    clearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        setTimeout(drainQueue, 0);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n\n},{}]},{},[1])\n\n","var Bullet = function(x, y, direction) {\n    Phaser.Sprite.call(this, game, x, y, 'bullet', 0);\n    game.physics.arcade.enable(this);\n    this.anchor.setTo(0.5, 0.5);\n    this.speed = 1000;\n    switch(direction)\n    {\n      case 'left':\n        this.body.velocity.x = -this.speed;\n        this.angle = 180;\n        break;\n      case 'right':\n        this.body.velocity.x = this.speed;\n        break;\n      case 'up':\n        this.body.velocity.y = -this.speed;\n        this.angle = 270;\n        break;\n      case 'down':\n        this.body.velocity.y = this.speed;\n        this.angle = 90;\n        break;\n    }\n    this.dead = false;\n    setInterval(this.die.bind(this), 300);\n    game.add.existing(this);\n};\n\nBullet.prototype = Object.create(Phaser.Sprite.prototype);\nBullet.prototype.constructor = Bullet;\n\nBullet.prototype.moveUpdate = function(platforms) {\n  this.bringToTop();\n  return (this.game.physics.arcade.overlap(this, platforms) || this.dead);\n};\n\nBullet.prototype.die = function() {\n  this.dead = true;\n}\n\nmodule.exports = Bullet;","var Bullet = require(\"./bullet\");\n\nvar Player = function(x, y, control) {\n    Phaser.Sprite.call(this, game, x, y, 'player', 0);\n    game.physics.arcade.enable(this);\n    this.control = control;\n    this.body.gravity.y = 3500;\n    this.animations.add('run', [1, 2], 10, true);\n    this.anchor.setTo(0.5, 1);\n    this.scale.x = 2;\n    this.scale.y = 2;\n    this.body.setSize(10, 30, 0, 0);\n    this.tint = '0x' + (Math.round(Math.random()*Math.pow(2, 24))).toString(16);\n    this.nickname = \"Player \" + String(game.rnd.integerInRange(1000, 9999));\n    this.nicknameText = game.add.text(x + 32, y - 16, this.nickname, { fontSize: '16px', fill: '#000' })\n    this.jumping = false;\n    this.jump = 600;\n    this.jumpPrevious = 0;\n    this.jumpAmount = 0;\n    this.jumpLimit = 8;\n    this.moveTimer = 0;\n    this.canShoot = true;\n    this.shootPower = 400;\n    this.shootInterval = setInterval(this.reshoot.bind(this), 120);\n    this.bullets = game.add.group();\n    this.bullets.classType = Bullet;\n    this.bullets.enableBody = true;\n    game.add.existing(this);\n};\n\nPlayer.prototype = Object.create(Phaser.Sprite.prototype);\nPlayer.prototype.constructor = Player;\n\nPlayer.prototype.moveUpdate = function(platforms, cursors) {\n  game.physics.arcade.collide(this, platforms);\n  if (this.control)\n  {\n    if (game.input.keyboard.isDown(Phaser.Keyboard.A))\n      this.body.velocity.x -= 50;\n    if (game.input.keyboard.isDown(Phaser.Keyboard.D))\n      this.body.velocity.x += 50;\n    if (!game.input.keyboard.isDown(Phaser.Keyboard.A) && !game.input.keyboard.isDown(Phaser.Keyboard.D) && !cursors.left.isDown && !cursors.right.isDown)\n    {\n      if (this.body.velocity.x > 0)\n        this.body.velocity.x -= 50;\n      else if (this.body.velocity.x < 0)\n        this.body.velocity.x += 50;\n      if (Math.abs(this.body.velocity.x) <= 100)\n        this.body.velocity.x = 0;\n    }\n    if (this.body.velocity.x > 800)\n      this.body.velocity.x = 800;\n    else if (this.body.velocity.x < -800)\n      this.body.velocity.x = -800;\n    if (this.body.velocity.x > 400)\n      this.body.velocity.x -= 100;\n    else if (this.body.velocity.x < -400)\n      this.body.velocity.x += 100;\n      \n    if (!this.jumping && game.input.keyboard.isDown(Phaser.Keyboard.W) && this.body.touching.down)\n    {\n      this.jumping = true;\n      this.jumpAmount = 0;\n    }\n    if (this.jumping)\n    {\n      this.body.velocity.y = -this.jump;\n      if (game.input.keyboard.isDown(Phaser.Keyboard.W) && this.jumpAmount <= this.jumpLimit)\n        this.jumpAmount++;\n      else\n        this.jumping = false;\n    }\n    this.jumpPrevious = this.y;\n    \n    if (this.canShoot)\n    {\n      if (cursors.left.isDown)\n      {\n        this.body.velocity.x += this.shootPower;\n        this.bullets.add(new Bullet(this.x, this.y - 32, 'left'));\n      }\n      if (cursors.right.isDown)\n      {\n        this.body.velocity.x -= this.shootPower;\n        this.bullets.add(new Bullet(this.x, this.y - 32, 'right'));\n      }\n      if (cursors.up.isDown)\n      {\n        this.body.velocity.y += this.shootPower;\n        this.bullets.add(new Bullet(this.x, this.y - 32, 'up'));\n      }\n      if (cursors.down.isDown)\n      {\n        this.body.velocity.y -= this.shootPower;\n        this.bullets.add(new Bullet(this.x, this.y - 32, 'down'));\n      }\n      if (cursors.left.isDown || cursors.right.isDown || cursors.up.isDown || cursors.down.isDown)\n        this.canShoot = false;\n    }\n  }\n  \n  if (this.body.velocity.y != 0 && !this.body.touching.down)\n  {\n    this.animations.stop();\n    this.frame = 3;\n  }\n  else if (this.body.velocity.x != 0)\n  {\n    this.animations.play('run');\n    if (this.body.velocity.x > 0)\n      this.scale.x = 2;\n    else\n      this.scale.x = -2;\n  }\n  else\n  {\n    this.animations.stop();\n    this.frame = 0;\n  }\n  \n  if (this.body.velocity.x == 0 && this.body.velocity.y == 0)\n  {\n    if (this.moveTimer > 0)\n      this.moveTimer--;\n  }\n  else\n    this.moveTimer = 120;\n  \n  var xBorder = 12;\n  var yBorder = 64;\n  if (this.x < -xBorder)\n    this.x = game.world.width + xBorder;\n  else if (this.x > game.world.width + xBorder)\n    this.x = -xBorder;\n    \n  if (this.y < -yBorder)\n    this.y = game.world.height + yBorder;\n  else if (this.y > game.world.height + yBorder)\n    this.y = -yBorder;\n    \n  this.bringToTop();\n  this.nicknameText.bringToTop();\n  this.nicknameText.text = this.nickname;\n  this.nicknameText.x = this.x - 46;\n  this.nicknameText.y = this.y - 84;\n  \n  this.bullets.forEach(function(bullet) {\n    if (bullet.moveUpdate(platforms))\n      this.bullets.remove(bullet, true);\n  }, this);\n};\n\nPlayer.prototype.destroy = function() {\n  this.nicknameText.destroy();\n  Phaser.Sprite.prototype.destroy.call(this);\n};\n\nPlayer.prototype.reshoot = function() {\n  this.canShoot = true;\n};\n\nmodule.exports = Player;\n\n","var Boot = function() {}\n\nmodule.exports = Boot;\n\nBoot.prototype = {\n  create: function() {\n    game.scale.scaleMode = Phaser.ScaleManager.RESIZE;\n    game.physics.startSystem(Phaser.Physics.ARCADE);\n    game.world.setBounds(0, 0, 2000, 2000);\n    game.stage.smoothed = false;\n    \n    game.state.start('preload');\n  }\n};","var Player = require(\"../entities/player\");\n\nvar Game = function() {};\n\nmodule.exports = Game;\n\nGame.prototype = {\n  sendIntervalTime: 60,\n  fixedSendIntervalTime: 600,\n  initSend: false,\n  buddydistancetimer: 0,\n  \n  create: function() {\n    this.onSocketConnect();\n    this.setEventHandlers();\n    \n    var sky = game.add.sprite(0, 0, 'sky');\n    sky.width = game.world.width;\n    sky.height = game.world.height;\n    \n    this.player = new Player(30, 30, true);\n    this.player.name = socket.id;\n    game.camera.follow(this.player, Phaser.Camera.FOLLOW_PLATFORMER);\n    this.initSend = true;\n    \n    this.otherPlayers = game.add.group();\n    this.otherPlayers.classType = Player;\n    this.otherPlayers.enableBody = true;\n    \n    this.platforms = game.add.group();\n    this.platforms.enableBody = true;\n    this.addPlatform(0, game.world.height - 64, 2, 2);\n    this.addPlatform(400, 400, 200, 2);\n    this.addPlatform(0, 250, 1, 1);\n    this.addPlatform(600, 300, 1, 1);\n    this.addPlatform(800, 1500, 1, 1);\n    this.addPlatform(1200, 900, 1, 1);\n    \n    this.stars = game.add.group();\n    this.stars.enableBody = true;\n    for (var i = 0; i < 12; i++)\n    {\n      var star = this.stars.create(i * 70, 0, 'star');\n      star.body.gravity.y = 600;\n      star.body.bounce.y = 0.7 + Math.random() * 0.2;\n    }\n    \n    this.cursors = game.input.keyboard.createCursorKeys();\n    \n    this.score = 0;\n    this.scoreText = game.add.text(16, 16, 'Coins: 0', { fontSize: '32px', fill: '#000' });\n    this.scoreText.fixedToCamera = true;\n    \n    /*this.overlay = game.add.sprite(0, 0, 'pixel');\n    this.overlay.width = game.world.width;\n    this.overlay.height = game.world.height;\n    this.overlay.alpha = 0.25;*/\n  },\n  \n  addPlatform: function(x, y, width, height) {\n    var platform = this.platforms.create(x, y, 'ground');\n    platform.scale.setTo(width, height);\n    platform.body.immovable = true;\n    platform.body.checkCollision.left = false;\n    platform.body.checkCollision.right = false;\n    platform.body.checkCollision.down = false;\n  },\n  \n  setEventHandlers: function() {\n    socket.on(\"connect\", this.onSocketConnect.bind(this));\n    socket.on(\"disconnect\", this.onSocketDisconnect.bind(this));\n    socket.on(\"player connect\", this.onPlayerConnect.bind(this));\n    socket.on(\"player update\", this.onPlayerUpdate.bind(this));\n    socket.on(\"player disconnect\", this.onPlayerDisconnect.bind(this));\n    socket.on(\"players\", this.onPlayers.bind(this));\n    socket.on(\"player count\", this.onPlayers.bind(this));\n  },\n\n  update: function() {\n    this.player.moveUpdate(this.platforms, this.cursors);\n    this.game.physics.arcade.collide(this.stars, this.platforms);\n    this.game.physics.arcade.overlap(this.player, this.stars, this.collectStar, null, this);\n    \n    this.otherPlayers.forEach(function(otherPlayer) {\n      otherPlayer.moveUpdate(this.platforms, this.cursors);\n    }, this);\n  },\n\n  collectStar: function(player, star) {\n    star.kill();\n    \n    this.score += 10;\n    this.scoreText.text = 'Coins: ' + this.score;\n  },\n\n  onSocketConnect: function() {\n    console.log(\"connected to server\");\n    this.sendInterval = setInterval(this.sendLoop.bind(this), this.sendIntervalTime);\n    this.sendInterval = setInterval(this.fixedSendLoop.bind(this), this.fixedSendIntervalTime);\n  },\n\n  onSocketDisconnect: function() {\n    console.log(\"disconnected from server\");\n    clearInterval(this.sendInterval);\n    game.state.start('preload');\n  },\n\n  onPlayerConnect: function(msg) {\n    this.addOtherPlayer(msg);\n    console.log(\"new player connected with id \" + msg[1]);\n  },\n\n  onPlayerUpdate: function(msg) {\n    for(var tempSocket in msg) {\n      this.otherPlayers.forEach(function(otherPlayer) {\n        if (msg[tempSocket][0] == otherPlayer.name)\n        {\n          var updatedX = msg[tempSocket][1];\n          var updatedY = msg[tempSocket][2];\n          if (game.physics.arcade.distanceToXY(otherPlayer, updatedX, updatedY) > 64)\n          {\n            otherPlayer.x = updatedX;\n            otherPlayer.y = updatedY;\n          }\n          else\n            game.physics.arcade.moveToXY(otherPlayer, updatedX, updatedY, 300, 60);\n          otherPlayer.frame = msg[tempSocket][3];\n          otherPlayer.body.velocity.x = msg[tempSocket][4];\n          otherPlayer.body.velocity.y = msg[tempSocket][5];\n        }\n      }, this);\n    }\n  },\n\n  onPlayerDisconnect: function(msg) {\n    this.otherPlayers.forEach(function(otherPlayer) {\n      if (msg == \"/#\" + otherPlayer.name)\n      {\n        otherPlayer.destroy();\n        console.log(\"player dced\");\n      }\n    }, this);\n  },\n  \n  onPlayers: function(msg) {\n    this.otherPlayers.removeAll(true);\n    for(var tempSocket in msg) {\n      if (msg[tempSocket][1] != this.player.name)\n        this.addOtherPlayer(msg[tempSocket]);\n    }\n  },\n  \n  fixedSendLoop: function() {\n    this.sendPlayerUpdate();\n    socket.emit(\"player count\", this.otherPlayers.length + 1);\n  },\n  \n  sendLoop: function() {\n    if (this.initSend)\n    {\n      socket.emit(\"player init\", [true, this.player.name, this.player.x, this.player.y, this.player.frame, this.player.nickname, this.player.tint, this.player.body.velocity.x, this.player.body.velocity.y]);\n      this.initSend = false;\n    }\n    else if (this.player.body.velocity.x != 0 || this.player.body.velocity.y != 0 || this.player.moveTimer > 0)\n      this.sendPlayerUpdate();\n  },\n  \n  sendPlayerUpdate: function() {\n    socket.emit(\"player update\", [true, this.player.x, this.player.y, this.player.frame, this.player.body.velocity.x, this.player.body.velocity.y]);\n  },\n  \n  addOtherPlayer: function(msg) {\n    var otherPlayer = this.otherPlayers.add(new Player(msg[2], msg[3], false));\n    otherPlayer.name = msg[1];\n    otherPlayer.frame = msg[4];\n    otherPlayer.nickname = msg[5];\n    otherPlayer.tint = msg[6];\n    otherPlayer.body.velocity.x = msg[7];\n    otherPlayer.body.velocity.y = msg[8];\n  }\n};","var Preload = function() {}\n\nmodule.exports = Preload;\n\nPreload.prototype = {\n  preload: function() {\n    if (!loaded)\n    {\n      var loadingText = game.add.text(16, 16, 'Loading...', {fontSize: '24px', fill: '#FFFFFF'});\n      var self = this;\n      game.load.image('sky', '../assets/sky.png');\n      game.load.image('ground', '../assets/platform.png');\n      game.load.image('star', '../assets/star.png');\n      game.load.image('bullet', '../assets/bullet.png');\n      game.load.image('pixel', '../assets/pixel.png');\n      game.load.spritesheet('player', '../assets/player.png', 32, 32);\n      game.load.spritesheet('hit', '../assets/hit.png', 32, 32);\n      game.load.onLoadComplete.add(function() {\n        loaded = true;\n        loadingText.destroy();\n        self.connect();\n      });\n    }\n    else\n      this.connect();\n  },\n\n  connect: function() {\n    var connectingText = game.add.text(16, 16, 'Connecting...', {fontSize: '24px', fill: '#FFFFFF'});\n    socket = io.connect(process.env.PORT);\n    socket.on(\"connect\", function() {\n      connectingText.destroy();\n      game.state.start('game');\n    });\n  },\n};","// shim for using process in browser\n\nvar process = module.exports = {};\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = setTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    clearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        setTimeout(drainQueue, 0);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n"]}