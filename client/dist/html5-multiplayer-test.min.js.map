{"version":3,"sources":["node_modules/browserify/node_modules/browser-pack/_prelude.js","client/src/client.js","html5-multiplayer-test.min.js","client/src/entities/player.js","client/src/states/boot.js","client/src/states/game.js","client/src/states/preload.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length",1,"module","startGame","game","Phaser","Game","AUTO","socket","io","state","add","start","window","loaded","./states/boot.js","./states/game.js","./states/preload.js",2,"Player","x","y","control","Sprite","this","physics","arcade","enable","body","gravity","animations","anchor","setTo","scale","setSize","tint","Math","round","random","pow","toString","nickname","String","rnd","integerInRange","nicknameText","text","fontSize","fill","jumping","jump","jumpPrevious","jumpAmount","jumpLimit","existing","prototype","Object","create","constructor","moveUpdate","platforms","cursors","collide","velocity","input","keyboard","isDown","Keyboard","A","D","W","touching","down","play","stop","frame","xBorder","yBorder","world","width","height","bringToTop","destroy",3,"Boot","scaleMode","ScaleManager","RESIZE","startSystem","Physics","ARCADE","setBounds","stage","smoothed",4,"sendIntervalTime","fixedSendIntervalTime","initSend","buddydistancetimer","onSocketConnect","setEventHandlers","sky","sprite","player","name","id","camera","follow","Camera","FOLLOW_PLATFORMER","otherPlayers","group","classType","enableBody","addPlatform","stars","star","bounce","createCursorKeys","score","scoreText","fixedToCamera","platform","immovable","checkCollision","left","right","on","bind","onSocketDisconnect","onPlayerConnect","onPlayerUpdate","onPlayerDisconnect","onPlayers","update","overlap","collectStar","forEach","otherPlayer","kill","console","log","sendInterval","setInterval","sendLoop","fixedSendLoop","clearInterval","msg","newPlayer","tempSocket","removeAll","emit","../entities/player",5,"Preload","preload","connect","loadingText","self","load","image","spritesheet","onLoadComplete","connectingText"],"mappings":"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","file":"html5-multiplayer-test.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","window.game = null;\nwindow.socket = null;\nwindow.loaded = false;\n\nstartGame();\n\nfunction startGame() {\n  game = new Phaser.Game(800, 600, Phaser.AUTO, '');\n  socket = io();\n  \n  game.state.add('boot', require('./states/boot.js'));\n  game.state.add('preload', require('./states/preload.js'));\n  game.state.add('game', require('./states/game.js'));\n    \n  game.state.start('boot');\n}","(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\nwindow.game = null;\nwindow.socket = null;\nwindow.loaded = false;\n\nstartGame();\n\nfunction startGame() {\n  game = new Phaser.Game(800, 600, Phaser.AUTO, '');\n  socket = io();\n  \n  game.state.add('boot', require('./states/boot.js'));\n  game.state.add('preload', require('./states/preload.js'));\n  game.state.add('game', require('./states/game.js'));\n    \n  game.state.start('boot');\n}\n},{\"./states/boot.js\":3,\"./states/game.js\":4,\"./states/preload.js\":5}],2:[function(require,module,exports){\nvar Player = function(x, y, control) {\n    Phaser.Sprite.call(this, game, x, y, 'player', 0);\n    game.physics.arcade.enable(this);\n    this.control = control;\n    this.body.gravity.y = 3500;\n    this.animations.add('run', [1, 2], 10, true);\n    this.anchor.setTo(0.5, 1);\n    this.scale.x = 2;\n    this.scale.y = 2;\n    this.body.setSize(10, 30, 0, 0);\n    this.tint = '0x' + (Math.round(Math.random()*Math.pow(2, 24))).toString(16);\n    this.nickname = \"Player \" + String(game.rnd.integerInRange(1000, 9999));\n    this.nicknameText = game.add.text(x + 32, y - 16, this.nickname, { fontSize: '16px', fill: '#000' })\n    this.jumping = false;\n    this.jump = 600;\n    this.jumpPrevious = 0;\n    this.jumpAmount = 0;\n    this.jumpLimit = 8;\n    game.add.existing(this);\n};\n\nPlayer.prototype = Object.create(Phaser.Sprite.prototype);\nPlayer.prototype.constructor = Player;\n\nPlayer.prototype.moveUpdate = function(platforms, cursors) {\n  game.physics.arcade.collide(this, platforms);\n  if (this.control)\n  {\n    this.body.velocity.x = 0;\n    if (game.input.keyboard.isDown(Phaser.Keyboard.A))\n      this.body.velocity.x = -400;\n    else if (game.input.keyboard.isDown(Phaser.Keyboard.D))\n      this.body.velocity.x = 400;\n      \n    if (!this.jumping && game.input.keyboard.isDown(Phaser.Keyboard.W) && this.body.touching.down)\n    {\n      this.jumping = true;\n      this.jumpAmount = 0;\n    }\n    if (this.jumping)\n    {\n      this.body.velocity.y = -this.jump;\n      if (game.input.keyboard.isDown(Phaser.Keyboard.W) && this.jumpAmount <= this.jumpLimit)\n        this.jumpAmount++;\n      else\n        this.jumping = false;\n    }\n    this.jumpPrevious = this.y;\n    \n    if (this.body.velocity.y != 0 && !this.body.touching.down)\n    {\n      this.animations.stop();\n      this.frame = 3;\n    }\n    else if (this.body.velocity.x != 0)\n    {\n      this.animations.play('run');\n      if (this.body.velocity.x > 0)\n        this.scale.x = 2;\n      else\n        this.scale.x = -2;\n    }\n    else\n    {\n      this.animations.stop();\n      this.frame = 0;\n    }\n  }\n  \n  var xBorder = 12;\n  var yBorder = 64;\n  if (this.x < -xBorder)\n    this.x = game.world.width + xBorder;\n  else if (this.x > game.world.width + xBorder)\n    this.x = -xBorder;\n    \n  if (this.y < -yBorder)\n    this.y = game.world.height + yBorder;\n  else if (this.y > game.world.height + yBorder)\n    this.y = -yBorder;\n    \n  this.bringToTop();\n  this.nicknameText.bringToTop();\n  this.nicknameText.text = this.nickname;\n  this.nicknameText.x = this.x - 46;\n  this.nicknameText.y = this.y - 84;\n};\n\nPlayer.prototype.destroy = function() {\n  this.nicknameText.destroy();\n  Phaser.Sprite.prototype.destroy.call(this);\n}\n\nmodule.exports = Player;\n\n\n},{}],3:[function(require,module,exports){\nvar Boot = function() {}\n\nmodule.exports = Boot;\n\nBoot.prototype = {\n  create: function() {\n    game.scale.scaleMode = Phaser.ScaleManager.RESIZE;\n    game.physics.startSystem(Phaser.Physics.ARCADE);\n    game.world.setBounds(0, 0, 2000, 2000);\n    game.stage.smoothed = false;\n    \n    game.state.start('preload');\n  }\n};\n},{}],4:[function(require,module,exports){\nvar Player = require(\"../entities/player\");\n\nvar Game = function() {};\n\nmodule.exports = Game;\n\nGame.prototype = {\n  sendIntervalTime: 60,\n  fixedSendIntervalTime: 600,\n  initSend: false,\n  buddydistancetimer: 0,\n  \n  create: function() {\n    this.onSocketConnect();\n    this.setEventHandlers();\n    \n    var sky = game.add.sprite(0, 0, 'sky');\n    sky.width = game.world.width;\n    sky.height = game.world.height;\n    \n    this.player = new Player(30, 30, true);\n    this.player.name = socket.id;\n    game.camera.follow(this.player, Phaser.Camera.FOLLOW_PLATFORMER);\n    this.initSend = true;\n    \n    this.otherPlayers = game.add.group();\n    this.otherPlayers.classType = Player;\n    this.otherPlayers.enableBody = true;\n    \n    this.platforms = game.add.group();\n    this.platforms.enableBody = true;\n    this.addPlatform(0, game.world.height - 64, 2, 2);\n    this.addPlatform(400, 400, 200, 2);\n    this.addPlatform(0, 250, 1, 1);\n    this.addPlatform(600, 300, 1, 1);\n    \n    this.stars = game.add.group();\n    this.stars.enableBody = true;\n    for (var i = 0; i < 12; i++)\n    {\n      var star = this.stars.create(i * 70, 0, 'star');\n      star.body.gravity.y = 600;\n      star.body.bounce.y = 0.7 + Math.random() * 0.2;\n    }\n    \n    this.cursors = game.input.keyboard.createCursorKeys();\n    \n    this.score = 0;\n    this.scoreText = game.add.text(16, 16, 'Coins: 0', { fontSize: '32px', fill: '#000' });\n    this.scoreText.fixedToCamera = true;\n    \n    /*this.overlay = game.add.sprite(0, 0, 'pixel');\n    this.overlay.width = game.world.width;\n    this.overlay.height = game.world.height;\n    this.overlay.alpha = 0.25;*/\n  },\n  \n  addPlatform: function(x, y, width, height) {\n    var platform = this.platforms.create(x, y, 'ground');\n    platform.scale.setTo(width, height);\n    platform.body.immovable = true;\n    platform.body.checkCollision.left = false;\n    platform.body.checkCollision.right = false;\n    platform.body.checkCollision.down = false;\n  },\n  \n  setEventHandlers: function() {\n    socket.on(\"connect\", this.onSocketConnect.bind(this));\n    socket.on(\"disconnect\", this.onSocketDisconnect.bind(this));\n    socket.on(\"player connect\", this.onPlayerConnect.bind(this));\n    socket.on(\"player update\", this.onPlayerUpdate.bind(this));\n    socket.on(\"player disconnect\", this.onPlayerDisconnect.bind(this));\n    socket.on(\"players\", this.onPlayers.bind(this));\n    socket.on(\"player count\", this.onPlayers.bind(this));\n  },\n\n  update: function() {\n    this.player.moveUpdate(this.platforms, this.cursors);\n    this.game.physics.arcade.collide(this.stars, this.platforms);\n    this.game.physics.arcade.overlap(this.player, this.stars, this.collectStar, null, this);\n    \n    this.otherPlayers.forEach(function(otherPlayer) {\n      otherPlayer.moveUpdate(this.platforms, this.cursors);\n    }, this);\n  },\n\n  collectStar: function(player, star) {\n    star.kill();\n    \n    this.score += 10;\n    this.scoreText.text = 'Coins: ' + this.score;\n  },\n\n  onSocketConnect: function() {\n    console.log(\"connected to server\");\n    this.sendInterval = setInterval(this.sendLoop.bind(this), this.sendIntervalTime);\n    this.sendInterval = setInterval(this.fixedSendLoop.bind(this), this.fixedSendIntervalTime);\n  },\n\n  onSocketDisconnect: function() {\n    console.log(\"disconnected from server\");\n    clearInterval(this.sendInterval);\n    game.state.start('preload');\n  },\n\n  onPlayerConnect: function(msg) {\n    var newPlayer = this.otherPlayers.add(new Player(msg[2], msg[3], false));\n    newPlayer.name = msg[1];\n    newPlayer.frame = msg[4];\n    newPlayer.nickname = msg[5];\n    newPlayer.tint = msg[6];\n    console.log(\"new player connected with id \" + msg[1]);\n  },\n\n  onPlayerUpdate: function(msg) {\n    for(var tempSocket in msg) {\n      this.otherPlayers.forEach(function(otherPlayer) {\n        if (msg[tempSocket][0] == otherPlayer.name)\n        {\n          otherPlayer.x = msg[tempSocket][1];\n          otherPlayer.y = msg[tempSocket][2];\n          otherPlayer.frame = msg[tempSocket][3];\n        }\n      }, this);\n    }\n  },\n\n  onPlayerDisconnect: function(msg) {\n    this.otherPlayers.forEach(function(otherPlayer) {\n      if (msg == \"/#\" + otherPlayer.name)\n      {\n        otherPlayer.destroy();\n        console.log(\"player dced\");\n      }\n    }, this);\n  },\n  \n  onPlayers: function(msg) {\n    this.otherPlayers.removeAll(true);\n    for(var tempSocket in msg) {\n      if (msg[tempSocket][1] != this.player.name)\n      {\n        var otherPlayer = this.otherPlayers.add(new Player(msg[tempSocket][2], msg[tempSocket][3], false));\n        otherPlayer.name = msg[tempSocket][1];\n        otherPlayer.frame = msg[tempSocket][4];\n        otherPlayer.nickname = msg[tempSocket][5];\n        otherPlayer.tint = msg[tempSocket][6];\n      }\n    }\n  },\n  \n  fixedSendLoop: function() {\n    socket.emit(\"player update\", [true, this.player.x, this.player.y, this.player.frame]);\n    socket.emit(\"player count\", this.otherPlayers.length + 1);\n  },\n  \n  sendLoop: function() {\n    if (this.initSend)\n    {\n      socket.emit(\"player init\", [true, this.player.name, this.player.x, this.player.y, this.player.frame, this.player.nickname, this.player.tint]);\n      this.initSend = false;\n    }\n    else if (this.player.body.velocity.x != 0 || this.player.body.velocity.y != 0)\n      socket.emit(\"player update\", [true, this.player.x, this.player.y, this.player.frame]);\n  }\n};\n},{\"../entities/player\":2}],5:[function(require,module,exports){\nvar Preload = function() {}\n\nmodule.exports = Preload;\n\nPreload.prototype = {\n  preload: function() {\n    if (!loaded)\n    {\n      var loadingText = game.add.text(16, 16, 'Loading...', {fontSize: '24px', fill: '#FFFFFF'});\n      var self = this;\n      game.load.image('sky', '../assets/sky.png');\n      game.load.image('ground', '../assets/platform.png');\n      game.load.image('star', '../assets/star.png');\n      game.load.image('pixel', '../assets/pixel.png');\n      game.load.spritesheet('player', '../assets/player.png', 32, 32);\n      game.load.onLoadComplete.add(function() {\n        loaded = true;\n        loadingText.destroy();\n        self.connect();\n      });\n    }\n    else\n      this.connect();\n  },\n\n  connect: function() {\n    var connectingText = game.add.text(16, 16, 'Connecting...', {fontSize: '24px', fill: '#FFFFFF'});\n    socket.on(\"connect\", function() {\n      connectingText.destroy();\n      game.state.start('game');\n    });\n  }\n};\n},{}]},{},[1])\n\n","var Player = function(x, y, control) {\n    Phaser.Sprite.call(this, game, x, y, 'player', 0);\n    game.physics.arcade.enable(this);\n    this.control = control;\n    this.body.gravity.y = 3500;\n    this.animations.add('run', [1, 2], 10, true);\n    this.anchor.setTo(0.5, 1);\n    this.scale.x = 2;\n    this.scale.y = 2;\n    this.body.setSize(10, 30, 0, 0);\n    this.tint = '0x' + (Math.round(Math.random()*Math.pow(2, 24))).toString(16);\n    this.nickname = \"Player \" + String(game.rnd.integerInRange(1000, 9999));\n    this.nicknameText = game.add.text(x + 32, y - 16, this.nickname, { fontSize: '16px', fill: '#000' })\n    this.jumping = false;\n    this.jump = 600;\n    this.jumpPrevious = 0;\n    this.jumpAmount = 0;\n    this.jumpLimit = 8;\n    game.add.existing(this);\n};\n\nPlayer.prototype = Object.create(Phaser.Sprite.prototype);\nPlayer.prototype.constructor = Player;\n\nPlayer.prototype.moveUpdate = function(platforms, cursors) {\n  game.physics.arcade.collide(this, platforms);\n  if (this.control)\n  {\n    this.body.velocity.x = 0;\n    if (game.input.keyboard.isDown(Phaser.Keyboard.A))\n      this.body.velocity.x = -400;\n    else if (game.input.keyboard.isDown(Phaser.Keyboard.D))\n      this.body.velocity.x = 400;\n      \n    if (!this.jumping && game.input.keyboard.isDown(Phaser.Keyboard.W) && this.body.touching.down)\n    {\n      this.jumping = true;\n      this.jumpAmount = 0;\n    }\n    if (this.jumping)\n    {\n      this.body.velocity.y = -this.jump;\n      if (game.input.keyboard.isDown(Phaser.Keyboard.W) && this.jumpAmount <= this.jumpLimit)\n        this.jumpAmount++;\n      else\n        this.jumping = false;\n    }\n    this.jumpPrevious = this.y;\n    \n    if (this.body.velocity.y != 0 && !this.body.touching.down)\n    {\n      this.animations.stop();\n      this.frame = 3;\n    }\n    else if (this.body.velocity.x != 0)\n    {\n      this.animations.play('run');\n      if (this.body.velocity.x > 0)\n        this.scale.x = 2;\n      else\n        this.scale.x = -2;\n    }\n    else\n    {\n      this.animations.stop();\n      this.frame = 0;\n    }\n  }\n  \n  var xBorder = 12;\n  var yBorder = 64;\n  if (this.x < -xBorder)\n    this.x = game.world.width + xBorder;\n  else if (this.x > game.world.width + xBorder)\n    this.x = -xBorder;\n    \n  if (this.y < -yBorder)\n    this.y = game.world.height + yBorder;\n  else if (this.y > game.world.height + yBorder)\n    this.y = -yBorder;\n    \n  this.bringToTop();\n  this.nicknameText.bringToTop();\n  this.nicknameText.text = this.nickname;\n  this.nicknameText.x = this.x - 46;\n  this.nicknameText.y = this.y - 84;\n};\n\nPlayer.prototype.destroy = function() {\n  this.nicknameText.destroy();\n  Phaser.Sprite.prototype.destroy.call(this);\n}\n\nmodule.exports = Player;\n\n","var Boot = function() {}\n\nmodule.exports = Boot;\n\nBoot.prototype = {\n  create: function() {\n    game.scale.scaleMode = Phaser.ScaleManager.RESIZE;\n    game.physics.startSystem(Phaser.Physics.ARCADE);\n    game.world.setBounds(0, 0, 2000, 2000);\n    game.stage.smoothed = false;\n    \n    game.state.start('preload');\n  }\n};","var Player = require(\"../entities/player\");\n\nvar Game = function() {};\n\nmodule.exports = Game;\n\nGame.prototype = {\n  sendIntervalTime: 60,\n  fixedSendIntervalTime: 600,\n  initSend: false,\n  buddydistancetimer: 0,\n  \n  create: function() {\n    this.onSocketConnect();\n    this.setEventHandlers();\n    \n    var sky = game.add.sprite(0, 0, 'sky');\n    sky.width = game.world.width;\n    sky.height = game.world.height;\n    \n    this.player = new Player(30, 30, true);\n    this.player.name = socket.id;\n    game.camera.follow(this.player, Phaser.Camera.FOLLOW_PLATFORMER);\n    this.initSend = true;\n    \n    this.otherPlayers = game.add.group();\n    this.otherPlayers.classType = Player;\n    this.otherPlayers.enableBody = true;\n    \n    this.platforms = game.add.group();\n    this.platforms.enableBody = true;\n    this.addPlatform(0, game.world.height - 64, 2, 2);\n    this.addPlatform(400, 400, 200, 2);\n    this.addPlatform(0, 250, 1, 1);\n    this.addPlatform(600, 300, 1, 1);\n    \n    this.stars = game.add.group();\n    this.stars.enableBody = true;\n    for (var i = 0; i < 12; i++)\n    {\n      var star = this.stars.create(i * 70, 0, 'star');\n      star.body.gravity.y = 600;\n      star.body.bounce.y = 0.7 + Math.random() * 0.2;\n    }\n    \n    this.cursors = game.input.keyboard.createCursorKeys();\n    \n    this.score = 0;\n    this.scoreText = game.add.text(16, 16, 'Coins: 0', { fontSize: '32px', fill: '#000' });\n    this.scoreText.fixedToCamera = true;\n    \n    /*this.overlay = game.add.sprite(0, 0, 'pixel');\n    this.overlay.width = game.world.width;\n    this.overlay.height = game.world.height;\n    this.overlay.alpha = 0.25;*/\n  },\n  \n  addPlatform: function(x, y, width, height) {\n    var platform = this.platforms.create(x, y, 'ground');\n    platform.scale.setTo(width, height);\n    platform.body.immovable = true;\n    platform.body.checkCollision.left = false;\n    platform.body.checkCollision.right = false;\n    platform.body.checkCollision.down = false;\n  },\n  \n  setEventHandlers: function() {\n    socket.on(\"connect\", this.onSocketConnect.bind(this));\n    socket.on(\"disconnect\", this.onSocketDisconnect.bind(this));\n    socket.on(\"player connect\", this.onPlayerConnect.bind(this));\n    socket.on(\"player update\", this.onPlayerUpdate.bind(this));\n    socket.on(\"player disconnect\", this.onPlayerDisconnect.bind(this));\n    socket.on(\"players\", this.onPlayers.bind(this));\n    socket.on(\"player count\", this.onPlayers.bind(this));\n  },\n\n  update: function() {\n    this.player.moveUpdate(this.platforms, this.cursors);\n    this.game.physics.arcade.collide(this.stars, this.platforms);\n    this.game.physics.arcade.overlap(this.player, this.stars, this.collectStar, null, this);\n    \n    this.otherPlayers.forEach(function(otherPlayer) {\n      otherPlayer.moveUpdate(this.platforms, this.cursors);\n    }, this);\n  },\n\n  collectStar: function(player, star) {\n    star.kill();\n    \n    this.score += 10;\n    this.scoreText.text = 'Coins: ' + this.score;\n  },\n\n  onSocketConnect: function() {\n    console.log(\"connected to server\");\n    this.sendInterval = setInterval(this.sendLoop.bind(this), this.sendIntervalTime);\n    this.sendInterval = setInterval(this.fixedSendLoop.bind(this), this.fixedSendIntervalTime);\n  },\n\n  onSocketDisconnect: function() {\n    console.log(\"disconnected from server\");\n    clearInterval(this.sendInterval);\n    game.state.start('preload');\n  },\n\n  onPlayerConnect: function(msg) {\n    var newPlayer = this.otherPlayers.add(new Player(msg[2], msg[3], false));\n    newPlayer.name = msg[1];\n    newPlayer.frame = msg[4];\n    newPlayer.nickname = msg[5];\n    newPlayer.tint = msg[6];\n    console.log(\"new player connected with id \" + msg[1]);\n  },\n\n  onPlayerUpdate: function(msg) {\n    for(var tempSocket in msg) {\n      this.otherPlayers.forEach(function(otherPlayer) {\n        if (msg[tempSocket][0] == otherPlayer.name)\n        {\n          otherPlayer.x = msg[tempSocket][1];\n          otherPlayer.y = msg[tempSocket][2];\n          otherPlayer.frame = msg[tempSocket][3];\n        }\n      }, this);\n    }\n  },\n\n  onPlayerDisconnect: function(msg) {\n    this.otherPlayers.forEach(function(otherPlayer) {\n      if (msg == \"/#\" + otherPlayer.name)\n      {\n        otherPlayer.destroy();\n        console.log(\"player dced\");\n      }\n    }, this);\n  },\n  \n  onPlayers: function(msg) {\n    this.otherPlayers.removeAll(true);\n    for(var tempSocket in msg) {\n      if (msg[tempSocket][1] != this.player.name)\n      {\n        var otherPlayer = this.otherPlayers.add(new Player(msg[tempSocket][2], msg[tempSocket][3], false));\n        otherPlayer.name = msg[tempSocket][1];\n        otherPlayer.frame = msg[tempSocket][4];\n        otherPlayer.nickname = msg[tempSocket][5];\n        otherPlayer.tint = msg[tempSocket][6];\n      }\n    }\n  },\n  \n  fixedSendLoop: function() {\n    socket.emit(\"player update\", [true, this.player.x, this.player.y, this.player.frame]);\n    socket.emit(\"player count\", this.otherPlayers.length + 1);\n  },\n  \n  sendLoop: function() {\n    if (this.initSend)\n    {\n      socket.emit(\"player init\", [true, this.player.name, this.player.x, this.player.y, this.player.frame, this.player.nickname, this.player.tint]);\n      this.initSend = false;\n    }\n    else if (this.player.body.velocity.x != 0 || this.player.body.velocity.y != 0)\n      socket.emit(\"player update\", [true, this.player.x, this.player.y, this.player.frame]);\n  }\n};","var Preload = function() {}\n\nmodule.exports = Preload;\n\nPreload.prototype = {\n  preload: function() {\n    if (!loaded)\n    {\n      var loadingText = game.add.text(16, 16, 'Loading...', {fontSize: '24px', fill: '#FFFFFF'});\n      var self = this;\n      game.load.image('sky', '../assets/sky.png');\n      game.load.image('ground', '../assets/platform.png');\n      game.load.image('star', '../assets/star.png');\n      game.load.image('pixel', '../assets/pixel.png');\n      game.load.spritesheet('player', '../assets/player.png', 32, 32);\n      game.load.onLoadComplete.add(function() {\n        loaded = true;\n        loadingText.destroy();\n        self.connect();\n      });\n    }\n    else\n      this.connect();\n  },\n\n  connect: function() {\n    var connectingText = game.add.text(16, 16, 'Connecting...', {fontSize: '24px', fill: '#FFFFFF'});\n    socket.on(\"connect\", function() {\n      connectingText.destroy();\n      game.state.start('game');\n    });\n  }\n};"]}